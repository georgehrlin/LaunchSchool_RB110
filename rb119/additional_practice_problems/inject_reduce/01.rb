=begin
Create a method that takes an array of numbers and returns the sum of each
number multiplied by its index position.

Examples:
# Test cases
puts sum_of_products([1, 2, 3, 4]) == 20    # (1*0) + (2*1) + (3*2) + (4*3) = 0 + 2 + 6 + 12 = 20
puts sum_of_products([5, 3, 2]) == 7        # (5*0) + (3*1) + (2*2) = 0 + 3 + 4 = 7
puts sum_of_products([]) == 0               # Empty array

Question generated by LSBot.
=end

=begin
# Wrong
def sum_of_products(arr)
  arr.each_with_index.reduce(:+) do |n, idx|
    n * idx
  end
end
=end

=begin
# Generated by ChatGPT
def sum_of_products(arr)
  arr.each_with_index.reduce(0) do |sum, (n, i)|
    puts "n is #{n}, i is #{i}, sum is #{sum}"
    sum + n * i
  end
end
=end

=begin
# Generated by ChatGPT
def sum_of_products(arr)
  arr.reduce([0, 0]) do |(sum, idx), n|
    [sum + n * idx, idx + 1]
  end.first
end
=end

# My own attempt after learning from ChatGPT
def sum_of_products(arr)
  arr.reduce(0) do |sum, n|
    p sum
    p n
    puts 
    p (sum + arr.index(n) * n)
  end
end

puts sum_of_products([1, 2, 3, 4]) # == 20    # (1*0) + (2*1) + (3*2) + (4*3) = 0 + 2 + 6 + 12 = 20
# puts sum_of_products([5, 3, 2]) == 7        # (5*0) + (3*1) + (2*2) = 0 + 3 + 4 = 7
# puts sum_of_products([]) == 0               # Empty array

=begin
Some notes on #inject/#reduce from Ruby Docs

You can think of
[ a, b, c, d ].inject(i) { |r, v| fn(r, v) }
as being
fn(fn(fn(fn(i, a), b), c), d)

In a way the inject function injects the function between the elements of the
enumerable.

#reduce means you use it when you want to reduce a collection to a single
#value.
=end
